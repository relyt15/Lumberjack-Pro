import java.util.Optional;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

public class ProjectPane extends GridPane {
    private Project project;
    private TextField nameField;
    private TextField dueDateField;
    private TextField descriptionField;
    private Text nameLabel;
    private Text dueDateLabel;
    private Text descriptionLabel;
    private Text accomplish;
    private CheckBox completedCheckBox;
    private Button saveButton;
    private Button editButton;
    private VBox taskListContainer;
    private Button addTaskButton;
    private Button removeProjectButton;
    private VBox vb;

    public ProjectPane(Project project) {
        this.project = project;
        ProjectService projServ = new ProjectService();
        TaskService taskServ = new TaskService();
        
        // Label for Project Name
        nameLabel = new Text("Project: " + project.getProjectName());
        
        
        // Label for Due Date
        dueDateLabel = new Text("Due Date: " + project.getProjectDueDate());
        
        // Label for Project Description
        descriptionLabel = new Text("Description: " + project.getProjectDescription());


        // Checkbox for Completion
        completedCheckBox = new CheckBox();
        completedCheckBox.setSelected(project.isProjectCompleted());
        
        // Save Button to update Project details
        saveButton = new Button("Save");
        saveButton.setOnAction(e -> saveProjectDetails());
        
        
        //---------------------------------------------------------------------------
        //Placing corresponding tasks within each project pane
        //---------------------------------------------------------------------------
        
        taskListContainer = new VBox(5);
        refreshTaskList();
        
        addTaskButton = new Button("Add Task");
        addTaskButton.setOnAction(e -> {
            TaskService taskService = new TaskService();
            Optional<Task> result = taskService.newTaskDialog();
            result.ifPresent(newTask -> {
                project.addTaskToProject(newTask);
                refreshTaskList(); // Make sure this updates your task UI
            });
        });
        
        removeProjectButton = new Button("Delete Project");
        removeProjectButton.setOnAction(e -> {
        ProjectService projService = new ProjectService();
        projServ.removeProject(project);

    // Remove ProjectPane from parent container
        if (this.getParent() instanceof HBox) {
        HBox parent = (HBox) this.getParent();
        parent.getChildren().remove(this);
    }
        });
        
        
        VBox taskSection = new VBox(10, new Label("Tasks:"), taskListContainer, addTaskButton, removeProjectButton);
        taskSection.setPadding(new Insets(10));
        this.setStyle("-fx-border-color: gray; -fx-border-width: 2px; -fx-border-radius: 5px; -fx-padding: 10px;");

        //---------------------------------------------------------------------------
        // Edit button setup
        //---------------------------------------------------------------------------
        
        //Edit button to update Project details
        editButton = new Button("Edit");
        editButton.setOnAction(e -> editProjectDetails());

        // Update Project when checkbox is clicked
        completedCheckBox.selectedProperty().addListener((obs, wasSelected, isNowSelected) -> {
            descriptionLabel.setStrikethrough(isNowSelected);
            dueDateLabel.setStrikethrough(isNowSelected);
            nameLabel.setStrikethrough(isNowSelected);
        });

        HBox checkAndEdit = new HBox(editButton, completedCheckBox);
        checkAndEdit.setSpacing(20);
        
        vb = new VBox(nameLabel, descriptionLabel, dueDateLabel,
                checkAndEdit, taskSection);
                
        // Styling and Spacing
        //this.setSpacing(15);
        this.setPadding(new Insets(10));
        this.setAlignment(Pos.CENTER_LEFT);

        // Add elements to the pane
        this.getChildren().addAll(vb);
    }
    
    public Project getProject() {
        return project;
    }
    private void saveProjectDetails() {
        project.setProjectName(nameField.getText());
        project.setProjectDueDate(dueDateField.getText());
        project.setProjectDescription(descriptionField.getText());
        if (completedCheckBox.isSelected()) {
            project.setProjectCompleted();
        }
        else {
            project.setProjectStatus("Pending");
        }
    } // end saveProjectDetails
    
    private void editProjectDetails(){
        ProjectService man1 = new ProjectService();
        
        Optional<Project> result = man1.editProjectDialog(project);
        result.ifPresent(updated -> {
            // Update the local project reference
            project = updated;

            // Update UI labels
            nameLabel.setText("Project: " + project.getProjectName());
            dueDateLabel.setText("Due Date: " + project.getProjectDueDate());
            descriptionLabel.setText("Description: " + project.getProjectDescription());
        });
    }
    
    public void refreshTaskList() {
        // Clear current task list in the UI
        taskListContainer.getChildren().clear();

        // Add tasks from project to the UI
        for (Task task : project.getTasks()) {
            TaskPane taskPane = new TaskPane(task);  // Create TaskPane for each task
            taskListContainer.getChildren().add(taskPane);  // Add to the task list container
        }
    }

}
            // Update UI labels
            nameLabel.setText("Project: " + project.getProjectName());
            dueDateLabel.setText("Due Date: " + project.getProjectDueDate());
            descriptionLabel.setText("Description: " + project.getProjectDescription());
        });
    }
    
    public void refreshTaskList() {
        // Clear current task list in the UI
        taskListContainer.getChildren().clear();

        // Add tasks from project to the UI
        for (Task task : project.getTasks()) {
            TaskPane taskPane = new TaskPane(task, project, taskListContainer);
            taskListContainer.getChildren().add(taskPane);  // Add to the task list container
        }
    }

}
